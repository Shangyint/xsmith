#lang racket/base

(require
 "grammar-macros.rkt"
 "cish2-properties.rkt"
 "cish2-utils.rkt"
 racr
 (for-syntax
  racket/base
  syntax/parse
  ))


(declare-spec cish2)

(add-to-grammar
 cish2
 [Node #f (precomment postcomment)]
 [Program Node ([Declaration *] [main : FunctionDefinition])]

 [Declaration Node (name)]
 ;[DeclarationHole Declaration ()]
 [VariableDeclaration Declaration (typename Expression)]
 [FunctionDefinition Declaration (typename [FormalParam *] Block)]
 ;[FunctionDefinitionHole FunctionDefinition ()]
 [FormalParam Node (typename name)]


 [Statement Node ()]
 [NullStatement Statement ()]
 [Block Statement ([Declaration *] [Statement *])]
 [ExpressionStatement Statement (Expression)]
 [IfStatement Statement ([test : Expression] [then : Statement])]
 [IfElseStatement IfStatement ([else : Statement])]
 [ReturnStatement Statement ()]
 ;[VoidReturnStatement ReturnStatement ()]
 [ValueReturnStatement ReturnStatement (Expression)]
 ;[StatementHole Statement ()]
 ;[BlockHole Block ()]

 [LoopStatement Statement ([test : Expression] [body : Statement])]
 [WhileStatement LoopStatement ()]
 [DoWhileStatement LoopStatement ()]
 [ForStatement LoopStatement ([init : Declaration] [update : Expression])]

 [Expression Node ()]
 ;[ExpressionHole Expression ()]

 [AssignmentExpression Expression (name Expression)]
 [FunctionApplicationExpression Expression (name [Expression *])]
 [BinaryExpression Expression ([l : Expression] [r : Expression])]
 [AdditionExpression BinaryExpression ()]
 [UnsafeAdditionExpression AdditionExpression ()]
 [SubtractionExpression BinaryExpression ()]
 [UnsafeSubtractionExpression SubtractionExpression ()]
 [MultiplicationExpression BinaryExpression ()]
 [UnsafeMultiplicationExpression MultiplicationExpression ()]
 [DivisionExpression BinaryExpression ()]
 [UnsafeDivisionExpression DivisionExpression ()]

 [IntOnlyBinaryExpression BinaryExpression ()]
 [ModulusExpression IntOnlyBinaryExpression ()]
 [UnsafeModulusExpression ModulusExpression ()]

 [ComparisonExpression BinaryExpression ()]
 [EqualityExpression ComparisonExpression ()]
 [GreaterThanExpression ComparisonExpression ()]
 [LessThanExpression ComparisonExpression ()]
 [LessOrEqualExpression ComparisonExpression ()]
 [GreaterOrEqualExpression ComparisonExpression ()]

 [IfExpression Expression ([test : Expression]
                           [then : Expression]
                           [else : Expression])]
 [LiteralInt Expression (val)]
 [LiteralFloat Expression (val)]
 [VariableReference Expression (name)]

 )

(add-prop cish2
          may-be-generated
          ;; abstract nodes
          [Declaration #f]
          [Statement #f]
          [ReturnStatement #f]
          [LoopStatement #f]
          [Expression #f]
          [BinaryExpression #f]
          [IntOnlyBinaryExpression #f]
          [ComparisonExpression #f]

          ;; Unsafe nodes should be generated by analysis transformations,
          ;; not random choice.
          [UnsafeAdditionExpression #f]
          [UnsafeSubtractionExpression #f]
          [UnsafeMultiplicationExpression #f]
          [UnsafeDivisionExpression #f]
          [UnsafeModulusExpression #f]
          )

(add-prop cish2
          depth-increase-predicate
          [Block (位 (n) (if (member (node-type (parent-node n))
                                    '(IfStatement
                                      IfElseStatement
                                      FunctionDefinition
                                      ForStatement
                                      WhileStatement
                                      DoWhileStatement))
                            (att-value 'ast-depth (parent-node n))
                            (add1 (att-value 'ast-depth (parent-node n)))))]
          ;; some nodes should never increase depth
          [ExpressionStatement (位(n)#f)]
          [AssignmentExpression (位(n)#f)]
          [Declaration (位(n)#f)])
