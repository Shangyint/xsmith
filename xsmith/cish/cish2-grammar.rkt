#lang racket/base

(provide cish2-grammar)

(require
 "../grammar-macros.rkt"
 "../core-properties.rkt"
 "cish2-utils.rkt"
 "../scope-graph.rkt"
 (only-in pprint [empty empty-doc])
 racr
 racket/random
 racket/class
 racket/dict
 )


(define-spec-component cish2-grammar)

(add-to-grammar
 cish2-grammar
 [Node #f ([precomment = empty-doc]
           [postcomment = empty-doc])]
 [Program Node ([declarations : Declaration * = (random 7)]
                [main : FunctionDefinition])]

 [Declaration Node ([liftdepth = 0]
                    ;; TODO - “lifttype” and “typename” should be merged into “type”
                    [lifttype = #f]
                    [name = (fresh-var-name "x_")])]
 [VariableDeclaration Declaration ([typename = (fresh-var-type)]
                                   Expression)]
 [FunctionDefinition Declaration ([typename = (fresh-var-type)]
                                  [params : FormalParam *]
                                  Block)]
 [FormalParam Node ([typename = (fresh-var-type)]
                    [name = (fresh-var-name "arg_")])]


 [Statement Node ()]
 [NullStatement Statement ()]
 [Block Statement ([declarations : Declaration * = (random 2)]
                   [statements : Statement * = (add1 (random 4))])]
 [ExpressionStatement Statement (Expression)]
 [IfStatement Statement ([test : Expression]
                         [then : Statement])]
 [IfElseStatement IfStatement ([else : Statement])]
 [ReturnStatement Statement ()]
 ;[VoidReturnStatement ReturnStatement ()]
 [ValueReturnStatement ReturnStatement (Expression)]

 [LoopStatement Statement ([test : Expression]
                           [body : Statement])]
 [WhileStatement LoopStatement ()]
 [DoWhileStatement LoopStatement ()]
 [ForStatement LoopStatement ([init : Declaration]
                              [update : Expression])]

 [Expression Node ()]

 [AssignmentExpression Expression ([name = "standin-name"]
                                   Expression)]
 [FunctionApplicationExpression Expression ([name = "standin-name"]
                                            [args : Expression *])]
 [BinaryExpression Expression ([l : Expression]
                               [r : Expression])]
 [AdditionExpression BinaryExpression ()]
 [UnsafeAdditionExpression AdditionExpression ()]
 [SubtractionExpression BinaryExpression ()]
 [UnsafeSubtractionExpression SubtractionExpression ()]
 [MultiplicationExpression BinaryExpression ()]
 [UnsafeMultiplicationExpression MultiplicationExpression ()]
 [DivisionExpression BinaryExpression ()]
 [UnsafeDivisionExpression DivisionExpression ()]

 [IntOnlyBinaryExpression BinaryExpression ()]
 [ModulusExpression IntOnlyBinaryExpression ()]
 [UnsafeModulusExpression ModulusExpression ()]

 [ComparisonExpression BinaryExpression ()]
 [EqualityExpression ComparisonExpression ()]
 [GreaterThanExpression ComparisonExpression ()]
 [LessThanExpression ComparisonExpression ()]
 [LessOrEqualExpression ComparisonExpression ()]
 [GreaterOrEqualExpression ComparisonExpression ()]

 [IfExpression Expression ([test : Expression]
                           [then : Expression]
                           [else : Expression])]
 [LiteralInt Expression (val)]
 [LiteralFloat Expression (val)]
 [VariableReference Expression (name)]

 )

(add-prop cish2-grammar
          may-be-generated
          ;; abstract nodes
          [Declaration #f]
          [Statement #f]
          [ReturnStatement #f]
          [LoopStatement #f]
          [Expression #f]
          [BinaryExpression #f]
          [IntOnlyBinaryExpression #f]
          [ComparisonExpression #f]

          ;; Unsafe nodes should be generated by analysis transformations,
          ;; not random choice.
          [UnsafeAdditionExpression #f]
          [UnsafeSubtractionExpression #f]
          [UnsafeMultiplicationExpression #f]
          [UnsafeDivisionExpression #f]
          [UnsafeModulusExpression #f]
          )

(add-prop cish2-grammar
          depth-increase
          [Block (λ (n) (if (member (node-type (parent-node n))
                                    '(IfStatement
                                      IfElseStatement
                                      FunctionDefinition
                                      ForStatement
                                      WhileStatement
                                      DoWhileStatement))
                            (att-value 'ast-depth (parent-node n))
                            (add1 (att-value 'ast-depth (parent-node n)))))]
          ;; some nodes should never increase depth
          [ExpressionStatement (λ(n)0)]
          [AssignmentExpression (λ(n)0)]
          [Declaration (λ(n)0)])

(add-prop cish2-grammar
          fresh
          [IfElseStatement (hash
                            'then
                            (make-hole 'Block)
                            'else
                            (make-hole 'Block))]
          [AssignmentExpression
           (hash
            'name
            (binding-name (random-ref (send this constrain-type))))]
          [VariableReference
           (let* ([choice* (random-ref (send this constrain-type))]
                  [choice (if (procedure? choice*) (choice*) choice*)])
             (hash 'name (binding-name choice)))]
          [FunctionApplicationExpression
           (let* ([choice* (random-ref (send this constrain-type))]
                  [choice (if (procedure? choice*) (choice*) choice*)])
             (hash 'name
                   (binding-name choice)
                   'Expression
                   (- (length (binding-type choice))
                      2)))]
          [VariableDeclaration
           (let* ([hole-name (ast-child 'name current-hole)]
                  [name (if (string? hole-name)
                            hole-name
                            (if (equal? (top-ancestor-node current-hole)
                                        (parent-node current-hole))
                                (fresh-var-name "global_")
                                (fresh-var-name "local_")))]
                  [hole-type (ast-child 'lifttype current-hole)]
                  [typename (if (ast-bud-node? hole-type)
                                (fresh-var-type)
                                hole-type)])
             (hash 'name name
                   'typename typename))]
          [FunctionDefinition
           (let* ([p (parent-node current-hole)]
                  [main? (and (eq? (node-type p) 'Program)
                              (eq? (ast-child 'main p) current-hole))]
                  [hole-name (ast-child 'name current-hole)]
                  [name (if (string? hole-name)
                            hole-name
                            (if main?
                                "main"
                                (fresh-var-name "func_")))]
                  [hole-type (ast-child 'lifttype current-hole)]
                  [return-type (if (ast-bud-node? hole-type)
                                   (if main? int-type (fresh-var-type))
                                   ;; typename is the string of the return type...
                                   (car (reverse hole-type)))]
                  [params (if (ast-bud-node? hole-type)
                              (expr->ast-list (if main? 0 (random 5))
                                              (make-fresh-node 'FormalParam))
                              (map (λ (t) (make-fresh-node 'FormalParam
                                                           (hash 'typename t)))
                                   (reverse (cdr (reverse (cdr hole-type))))))])
             (hash
              'name name
              'typename return-type
              'params params))]
          )

#;(add-prop cish2-grammar
          introduces-scope
          [Program #t]
          [FunctionDefinition #t]
          [Block #t]
          [ForStatement #t])
(add-prop cish2-grammar
          binder-info
          [Declaration (name binder-type)]
          [VariableDeclaration (name binder-type)]
          [FunctionDefinition (name binder-type)]
          [FormalParam (name binder-type)])

(add-prop
 cish2-grammar
 choice-filters-to-apply
 [#f (
      features-enabled
      respect-return-position
      misc-constraints
      constrain-type
      )])
